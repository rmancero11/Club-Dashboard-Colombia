// ================== Generators/Datasource ==================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================== Enums ==================
enum Role {
  USER
  ADMIN
  SELLER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ReservationStatus {
  LEAD
  QUOTED
  HOLD
  CONFIRMED
  TRAVELING
  COMPLETED
  CANCELED
  EXPIRED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ActivityAction {
  LOGIN
  LOGOUT
  CREATE_CLIENT
  UPDATE_CLIENT
  LEAD_CREATED_FROM_WP
  LEAD_ASSIGNED
  CREATE_RESERVATION
  UPDATE_RESERVATION
  CHANGE_STATUS
  QUOTE_SENT
  HOLD_SET
  EXPIRED_AUTO
  WHATSAPP_SENT
  WHATSAPP_RECEIVED
  GENERATE_REPORT
  NOTE
}

// === Suscripciones ===
enum SubscriptionPlan {
  STANDARD
  PREMIUM
  VIP
}

// === Nuevo: opción de tiquete aéreo para selección ===
enum AirfareOption {
  WITH_AIRFARE
  WITHOUT_AIRFARE
}

// ================== Usuarios ==================
model User {
  id             String     @id @default(uuid())
  email          String     @unique
  name           String?
  phone          String?
  country        String?
  budget         String?
  preference     String?
  destino        String?
  password       String
  role           Role       @default(USER)
  status         UserStatus @default(ACTIVE)
  verified       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  avatar         String     @default("/images/default-avatar.png")
  timezone       String?
  commissionRate Decimal?   @db.Decimal(5, 2)
  dniFile        String?
  passport       String?
  visa           String?
  purchaseOrder        String?
  flightTickets        String?
  serviceVoucher       String?
  medicalAssistanceCard String?
  travelTips           String?
  comment        String?
  singleStatus   String?
  affirmation    String?
  acceptedTerms  Boolean?
  flow           String?
  birthday       DateTime?
  gender         String?
  lookingFor     String?
  galleryImages  String[]   @default([])

  sellerClients       Client[]             @relation("SellerClients")
  sellerReservations  Reservation[]        @relation("SellerReservations")
  sellerTasks         Task[]               @relation("SellerTasks")
  passwordResetTokens PasswordResetToken[]

  whatsappNumber  String?
  currentlyLink   String?

  clientProfile Client? @relation("ClientUser")

  activities ActivityLog[] @relation("UserActivities")

  @@index([role, status])
}

// ================== Catálogo de Categorías ==================
// Permite agregar categorías libres como "playa", "aventura", "cultura", etc.
model Category {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  // Relación M:N con destinos (implícita)
  destinations Destination[]
}

// ================== Viajes / Destinos ==================
model Destination {
  id          String   @id @default(uuid())
  name        String
  country     String
  city        String?
  description String?
  isActive    Boolean  @default(true)
  popularityScore Int  @default(0)
  imageUrl        String?

  // === Membresía requerida para el destino (por defecto STANDARD) ===
  membership SubscriptionPlan @default(STANDARD)

  // === Precios por moneda y con/sin tiquete aéreo (pensado para extranjeros) ===
  priceUSDWithAirfare     Decimal? @db.Decimal(12, 2)
  priceUSDWithoutAirfare  Decimal? @db.Decimal(12, 2)
  priceCOPWithAirfare     Decimal? @db.Decimal(14, 2)
  priceCOPWithoutAirfare  Decimal? @db.Decimal(14, 2)

  // (opcional) precios “desde” para listados
  baseFromUSD Decimal? @db.Decimal(12, 2)
  baseFromCOP Decimal? @db.Decimal(14, 2)

  // === Categorías (M:N) ===
  categories Category[]

  // === Fechas (1:N) ===
  tripDates TripDate[]

  // Reservas que apuntan al destino
  reservations Reservation[]

  // (campos legados; puedes eliminarlos si ya no los usas)
  price         Decimal? @db.Decimal(10, 2)
  discountPrice Decimal? @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, country, city])
  @@index([isActive, popularityScore])
  @@index([country, city])
  @@index([membership])
}

// === Fechas de viaje por destino (varias salidas) ===
model TripDate {
  id            String      @id @default(uuid())
  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate   DateTime

  // Para UI/gestión
  isActive Boolean  @default(true)
  notes    String?

  // (Opcional) cupos disponibles, si lo llegas a necesitar
  capacity Int?

  // Si una reserva quiere amarrarse a una fecha concreta:
  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([destinationId, startDate, endDate])
  @@index([isActive])
}

// ================== Clientes ==================
model Client {
  id         String   @id @default(uuid())

  sellerId String
  seller   User   @relation("SellerClients", fields: [sellerId], references: [id], onDelete: Restrict)

  userId String @unique
  user   User   @relation("ClientUser", fields: [userId], references: [id], onDelete: Cascade)

  name       String
  email      String?
  phone      String?
  documentId String?
  country    String?
  city       String?
  birthDate  DateTime?
  tags       String[]  @default([])
  notes      String?
  isArchived Boolean   @default(false)

  subscriptionPlan SubscriptionPlan @default(STANDARD)

  reservations Reservation[]
  activities  ActivityLog[] @relation("ClientActivities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId, name])
  @@index([email])
  @@index([documentId])
  @@index([sellerId, subscriptionPlan])
}

// ================== Reservas ==================
model Reservation {
  id   String @id @default(uuid())

  code String @unique // p.ej. RES-2025-000123

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  sellerId String
  seller   User   @relation("SellerReservations", fields: [sellerId], references: [id], onDelete: Restrict)

  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Restrict)

  // === (Opcional) vincular a una salida específica del destino ===
  tripDateId String?
  tripDate   TripDate? @relation(fields: [tripDateId], references: [id], onDelete: SetNull)

  startDate   DateTime
  endDate     DateTime
  paxAdults   Int      @default(1)
  paxChildren Int      @default(0)

  currency    String            @default("USD")
  totalAmount Decimal           @default(0) @db.Decimal(12, 2)

  // === Selección del usuario: con/sin boleto aéreo ===
  airfareOption AirfareOption @default(WITHOUT_AIRFARE)

  status      ReservationStatus @default(LEAD)
  notes       String?

  tasks      Task[]        @relation("ReservationTasks")
  activities ActivityLog[] @relation("ReservationActivities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId, status])
  @@index([destinationId, status])
  @@index([startDate, endDate])
  @@index([clientId])
  @@index([tripDateId])
}

model Task {
  id        String   @id @default(uuid())

  sellerId String
  seller   User   @relation("SellerTasks", fields: [sellerId], references: [id], onDelete: Cascade)

  reservationId String?
  reservation   Reservation? @relation("ReservationTasks", fields: [reservationId], references: [id])

  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus   @default(OPEN)
  priority    TaskPriority @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId, status, priority])
  @@index([reservationId])
}

model ActivityLog {
  id      String   @id @default(uuid())

  action   ActivityAction
  message  String?
  metadata Json?

  userId String?
  user   User?   @relation("UserActivities", fields: [userId], references: [id], onDelete: SetNull)

  clientId String?
  client   Client? @relation("ClientActivities", fields: [clientId], references: [id], onDelete: SetNull)

  reservationId String?
  reservation   Reservation? @relation("ReservationActivities", fields: [reservationId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([action, createdAt])
  @@index([userId])
  @@index([clientId])
  @@index([reservationId])
}

model PasswordResetToken {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  tokenHash String  @unique
  expiresAt DateTime
  usedAt    DateTime?
  ip        String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([userId, expiresAt])
}
