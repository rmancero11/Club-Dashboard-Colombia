// ================== Generators/Datasource ==================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================== Enums ==================
enum Role {
  USER // viajero con login (únicos que pueden tener Client)
  ADMIN
  SELLER // agente/vendedor (dashboard interno)
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

// Embudo simple (sin pagos): Lead -> Cotizado -> Confirmado -> Viajando -> Completado
enum ReservationStatus {
  LEAD // Lead creado (registro desde WP o interés en destino)
  QUOTED // Cotización enviada / seguimiento activo
  HOLD // Opción/bloqueo temporal gestionado con proveedor
  CONFIRMED // Confirmada (cupos OK)
  TRAVELING // Viaje en curso
  COMPLETED // Viaje finalizado
  CANCELED // Cancelada
  EXPIRED // Venció la opción/hold sin respuesta
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED // esperando info de cliente/proveedor (p. ej., por WhatsApp)
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ActivityAction {
  // Autenticación
  LOGIN
  LOGOUT

  // Clientes / Leads
  CREATE_CLIENT
  UPDATE_CLIENT
  LEAD_CREATED_FROM_WP // Lead registrado desde WordPress (incluye destino)
  LEAD_ASSIGNED // Lead asignado a un SELLER

  // Reservas
  CREATE_RESERVATION
  UPDATE_RESERVATION
  CHANGE_STATUS // Cambios en ReservationStatus
  QUOTE_SENT // Cotización enviada
  HOLD_SET // Opción/hold creado
  EXPIRED_AUTO // Lead/hold marcado como expirado

  // Comunicación (WhatsApp-first)
  WHATSAPP_SENT // Mensaje saliente
  WHATSAPP_RECEIVED // Mensaje entrante

  // Reportes / notas
  GENERATE_REPORT
  NOTE
}

// ================== Núcleo multi-tenant ==================
model Business {
  id              String   @id @default(cuid())
  Name            String
  slug            String   @unique
  IconoWhite      String?
  Cover           String?
  SocialMedia     Json?
  Plan            String?
  BusinessProgram String?
  Template        String?
  PricePlan       Int?
  country         String?
  createdAt       DateTime @default(now())
  sessionId       String?

  // Relaciones
  users        User[]
  branches     Branch[]
  destinations Destination[]
  clients      Client[]
  reservations Reservation[]
  tasks        Task[]
  activities   ActivityLog[]

  @@index([slug])
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String
  mapsUrl   String?
  icon      String?
  cover     String?
  country   String?
  createdAt DateTime @default(now())

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  @@index([businessId, name])
}

// ================== Usuarios (viajeros / agentes / admins) ==================
model User {
  id             String     @id @default(uuid())
  email          String     @unique
  name           String?
  phone          String?
  country        String?
  budget         String?
  preference     String?
  destino        String?
  password       String
  role           Role       @default(USER) // USER | ADMIN | SELLER
  status         UserStatus @default(ACTIVE)
  verified   Boolean   @default(false)
  createdAt      DateTime   @default(now())
  avatar         String     @default("/images/default-avatar.png")
  timezone       String?
  commissionRate Decimal?   @db.Decimal(5, 2)
  dniFile   String?
  passport       String?
  visa           String?
  purchaseOrder        String? 
  flightTickets        String? 
  serviceVoucher       String? 
  medicalAssistanceCard String? 
  travelTips           String? 
  comment        String? 
  singleStatus   String?   
  affirmation    String?     
  acceptedTerms  Boolean?  
  flow           String?   
  business   Business? @relation(fields: [businessId], references: [id])
  businessId String?
  birthday   DateTime?
  gender     String?
  lookingFor String? 

  // Relaciones cuando es SELLER (agente)
  sellerClients       Client[]             @relation("SellerClients")
  sellerReservations  Reservation[]        @relation("SellerReservations")
  sellerTasks         Task[]               @relation("SellerTasks")
  passwordResetTokens PasswordResetToken[]
  sellerClients      Client[]      @relation("SellerClients")
  sellerReservations Reservation[] @relation("SellerReservations")
  sellerTasks        Task[]        @relation("SellerTasks")

  whatsappNumber  String?
  currentlyLink   String?

  // Perfil de cliente (solo si role = USER) — validado en la app
  clientProfile Client? @relation("ClientUser")

  activities ActivityLog[] @relation("UserActivities")

  @@index([role, status])
  @@index([businessId])
}

// ================== Viajes ==================
model Destination {
  id         String   @id @default(uuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  name            String
  country         String
  city            String?
  description     String?
  category        String? // playa, ciudad, montaña...
  isActive        Boolean @default(true)
  popularityScore Int     @default(0) // cache para "más populares"
  imageUrl        String?
  price          Decimal?  @db.Decimal(10, 2)
  discountPrice  Decimal?  @db.Decimal(10, 2)

  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, name, country, city])
  @@index([businessId, isActive, popularityScore])
  @@index([country, city])
}

model Client {
  id         String   @id @default(uuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Dueño/gestor del cliente (agente)
  sellerId String
  seller   User   @relation("SellerClients", fields: [sellerId], references: [id], onDelete: Restrict)

  // Vínculo OBLIGATORIO al usuario (User con role=USER; validar en la app/seed)
  userId String @unique
  user   User   @relation("ClientUser", fields: [userId], references: [id], onDelete: Cascade)

  name       String
  email      String?
  phone      String?
  documentId String?
  country    String?
  city       String?
  birthDate  DateTime?
  tags       String[]  @default([])
  notes      String?
  isArchived Boolean   @default(false)

  reservations Reservation[]
  activities   ActivityLog[] @relation("ClientActivities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId, sellerId, name])
  @@index([email])
  @@index([documentId])
}

model Reservation {
  id         String   @id @default(uuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  code String @unique // p.ej. RES-2025-000123

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  sellerId String
  seller   User   @relation("SellerReservations", fields: [sellerId], references: [id], onDelete: Restrict)

  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Restrict)

  startDate   DateTime
  endDate     DateTime
  paxAdults   Int      @default(1)
  paxChildren Int      @default(0)

  currency    String            @default("USD")
  totalAmount Decimal           @default(0) @db.Decimal(12, 2)
  status      ReservationStatus @default(LEAD)
  notes       String?

  tasks      Task[]        @relation("ReservationTasks")
  activities ActivityLog[] @relation("ReservationActivities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId, sellerId, status])
  @@index([destinationId, status])
  @@index([startDate, endDate])
  @@index([clientId])
}

model Task {
  id         String   @id @default(uuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  sellerId String
  seller   User   @relation("SellerTasks", fields: [sellerId], references: [id], onDelete: Cascade)

  reservationId String?
  reservation   Reservation? @relation("ReservationTasks", fields: [reservationId], references: [id])

  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus   @default(OPEN)
  priority    TaskPriority @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId, sellerId, status, priority])
  @@index([reservationId])
}

model ActivityLog {
  id         String   @id @default(uuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  action   ActivityAction
  message  String?
  metadata Json?

  userId String?
  user   User?   @relation("UserActivities", fields: [userId], references: [id], onDelete: SetNull)

  clientId String?
  client   Client? @relation("ClientActivities", fields: [clientId], references: [id], onDelete: SetNull)

  reservationId String?
  reservation   Reservation? @relation("ReservationActivities", fields: [reservationId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([businessId, action, createdAt])
  @@index([userId])
  @@index([clientId])
  @@index([reservationId])
}

model PasswordResetToken {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // guarda SOLO el hash del token (no el token plano)
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  ip        String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([userId, expiresAt])
}
