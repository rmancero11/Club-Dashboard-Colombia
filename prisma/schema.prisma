// ================== Generators/Datasource ==================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================== Enums ==================
enum Role {
  USER
  ADMIN
  SELLER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ReservationStatus {
  LEAD
  QUOTED
  HOLD
  CONFIRMED
  TRAVELING
  COMPLETED
  CANCELED
  EXPIRED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ActivityAction {
  // Autenticación
  LOGIN
  LOGOUT

  // Clientes / Leads
  CREATE_CLIENT
  UPDATE_CLIENT
  LEAD_CREATED_FROM_WP
  LEAD_ASSIGNED

  // Reservas
  CREATE_RESERVATION
  UPDATE_RESERVATION
  CHANGE_STATUS
  QUOTE_SENT
  HOLD_SET
  EXPIRED_AUTO

  // Comunicación
  WHATSAPP_SENT
  WHATSAPP_RECEIVED

  // Reportes / notas
  GENERATE_REPORT
  NOTE
}

// ================== Usuarios ==================
model User {
  id             String     @id @default(uuid())
  email          String     @unique
  name           String?
  phone          String?
  country        String?
  budget         String?
  preference     String?
  destino        String?
  password       String
  role           Role       @default(USER)
  status         UserStatus @default(ACTIVE)
  verified       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  avatar         String     @default("/images/default-avatar.png")
  timezone       String?
  commissionRate Decimal?   @db.Decimal(5, 2)
  dniFile        String?
  passport       String?
  visa           String?
  purchaseOrder        String?
  flightTickets        String?
  serviceVoucher       String?
  medicalAssistanceCard String?
  travelTips           String?
  comment        String?
  singleStatus   String?
  affirmation    String?
  acceptedTerms  Boolean?
  flow           String?
  birthday       DateTime?
  gender         String?
  lookingFor     String?

  // Relaciones cuando es SELLER (agente)
  sellerClients       Client[]             @relation("SellerClients")
  sellerReservations  Reservation[]        @relation("SellerReservations")
  sellerTasks         Task[]               @relation("SellerTasks")
  passwordResetTokens PasswordResetToken[]

  whatsappNumber  String?
  currentlyLink   String?

  // Perfil de cliente (solo si role = USER) — validado en la app
  clientProfile Client? @relation("ClientUser")

  activities ActivityLog[] @relation("UserActivities")

  @@index([role, status])
}

// ================== Viajes ==================
model Destination {
  id          String   @id @default(uuid())
  name        String
  country     String
  city        String?
  description String?
  category    String?
  isActive    Boolean  @default(true)
  popularityScore Int  @default(0)
  imageUrl        String?
  price           Decimal? @db.Decimal(10, 2)
  discountPrice   Decimal? @db.Decimal(10, 2)

  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Antes: @@unique([businessId, name, country, city])
  @@unique([name, country, city])
  @@index([isActive, popularityScore])
  @@index([country, city])
}

model Client {
  id         String   @id @default(uuid())

  // Dueño/gestor del cliente (agente)
  sellerId String
  seller   User   @relation("SellerClients", fields: [sellerId], references: [id], onDelete: Restrict)

  // Vínculo OBLIGATORIO al usuario (role=USER)
  userId String @unique
  user   User   @relation("ClientUser", fields: [userId], references: [id], onDelete: Cascade)

  name       String
  email      String?
  phone      String?
  documentId String?
  country    String?
  city       String?
  birthDate  DateTime?
  tags       String[]  @default([])
  notes      String?
  isArchived Boolean   @default(false)

  reservations Reservation[]
  activities  ActivityLog[] @relation("ClientActivities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId, name])
  @@index([email])
  @@index([documentId])
}

model Reservation {
  id   String @id @default(uuid())

  code String @unique // p.ej. RES-2025-000123

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  sellerId String
  seller   User   @relation("SellerReservations", fields: [sellerId], references: [id], onDelete: Restrict)

  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Restrict)

  startDate   DateTime
  endDate     DateTime
  paxAdults   Int      @default(1)
  paxChildren Int      @default(0)

  currency    String            @default("USD")
  totalAmount Decimal           @default(0) @db.Decimal(12, 2)
  status      ReservationStatus @default(LEAD)
  notes       String?

  tasks      Task[]        @relation("ReservationTasks")
  activities ActivityLog[] @relation("ReservationActivities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId, status])
  @@index([destinationId, status])
  @@index([startDate, endDate])
  @@index([clientId])
}

model Task {
  id        String   @id @default(uuid())

  sellerId String
  seller   User   @relation("SellerTasks", fields: [sellerId], references: [id], onDelete: Cascade)

  reservationId String?
  reservation   Reservation? @relation("ReservationTasks", fields: [reservationId], references: [id])

  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus   @default(OPEN)
  priority    TaskPriority @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId, status, priority])
  @@index([reservationId])
}

model ActivityLog {
  id      String   @id @default(uuid())

  action   ActivityAction
  message  String?
  metadata Json?

  userId String?
  user   User?   @relation("UserActivities", fields: [userId], references: [id], onDelete: SetNull)

  clientId String?
  client   Client? @relation("ClientActivities", fields: [clientId], references: [id], onDelete: SetNull)

  reservationId String?
  reservation   Reservation? @relation("ReservationActivities", fields: [reservationId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([action, createdAt])
  @@index([userId])
  @@index([clientId])
  @@index([reservationId])
}

model PasswordResetToken {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  tokenHash String  @unique
  expiresAt DateTime
  usedAt    DateTime?
  ip        String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([userId, expiresAt])
}
