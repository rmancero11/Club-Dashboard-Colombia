// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  email      String   @unique
  name       String?
  phone      String? 
  country    String?
  budget     String?
  preference String?
  destino    String?
  password   String
  role       Role   @default(USER)
  createdAt  DateTime @default(now())
  business    Business? @relation(fields: [businessId], references: [id])
  businessId  String?
}

model Business {
  id            String     @id @default(cuid())
  Name          String
  slug          String     @unique
  IconoWhite    String?
  Cover         String?
  SocialMedia   Json?
  Plan          String?
  BusinessProgram String?
  Template      String?
  PricePlan     Int?
  country       String?
  createdAt     DateTime   @default(now())
  sessionId     String?
  // Relaciones
  users         User[]
  branches      Branch[]
  waiters       Waiter[]
  customers     Customer[]
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String
  mapsUrl   String?
  icon      String?
  cover     String?
  country   String?
  createdAt DateTime @default(now())
  // Relaciones
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
  waiters    Waiter[]
  customers  Customer[]
}

model Waiter {
  id        String   @id @default(cuid())
  name      String
  gender    String
  createdAt DateTime @default(now())
  // Relaciones
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
  branch     Branch?  @relation(fields: [branchId], references: [id])
  branchId   String?
  feedbacks  Feedback[]
}

model Customer {
  id        String   @id @default(cuid())
  name      String?
  email     String?
  createdAt DateTime @default(now())
  // Relaciones
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
  branch     Branch?  @relation(fields: [branchId], references: [id])
  branchId   String?
  feedbacks  Feedback[]
}

model Feedback {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  // Relaciones
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  waiter     Waiter?  @relation(fields: [waiterId], references: [id])
  waiterId   String?
}

enum Role {
  USER
  ADMIN
}